---
title: "Figure 3"
format: html
editor: visual
---

```{r setup}

# Load packages
library(PhaseTypeR)
library(tidyverse)
library(ggthemes)
library(expm)
library(partitions)
library(ggh4x)


```


# Figure 3

First, we will define a function for computing the transition rate matrix of the coalescent (block counting process) given a certain sample size:

```{r}

## Purpose:
## This function finds the state space and corresponding rate matrix
## for the block counting process for a number of samples n in the 
## standard coalescent.
##
## Input:
## n: Number of samples
##
## Output:
## List consisting of
## RateM: Rate matrix
## StSpM: Matrix with rows corresponding to the states
##        A state is a n-dimensional row vector (a1,...,an).
##        For example the beginning state is (n,0,...,0),
##        the next state is (n-2,1,0,...,0), 
##        and the ending state (MRCA) is (0,...,0,1).
##
##----------------------------------------------------------------
BlockCountingRateMAndStateSpace <- function(n){
  ##----------------------------------------------------
  ## Possible states
  ##----------------------------------------------------
  ## Size of the state space (number of states)
  nSt <- P(n)
  ## Definition of the state space
  StSpM <- matrix(ncol=n,nrow=nSt)
  ## Set of partitions of [n]
  x <- parts(n)
  ## Rewriting the partitions as (a1,...,an)
  for (i in 1:nSt) {
    st <- x[,i]
    StSpM[i,] <- tabulate(x[,i],nbins=n)
  }
  ## Reordering
  StSpM <- StSpM[order(rowSums(StSpM),decreasing=TRUE),]
  ## Because of this ordering we can't 'go back', i.e.
  ## below the diagonal the entries are always zero
  ##----------------------------------------------------
  ## Intensity matrix
  ##----------------------------------------------------
  RateM <- matrix(0,ncol=nSt,nrow=nSt)
  ## Algorithm for finding rates between states
  for (i in 1:(nSt-1)){
    for (j in (i+1):nSt){
      # cat(i," state i",StSpM[i,])
      # cat(" ",j," state j",StSpM[j,])
      cvec <- StSpM[i,]-StSpM[j,]
      # cat(" cvec",cvec)
      ## Two branches are merged, i.e. removed from state i 
      check1 <- sum(cvec[cvec>0])==2
      # cat(" check1",check1)
      ## One new branch is created, i.e. added in state from j
      check2 <- sum(cvec[cvec<0])==-1
      # cat(" check2",check2)
      if (check1 & check2){
        ## Size(s) of the block(s) and the corresponding rates
        tmp <- StSpM[i,which(cvec>0)]
        RateM[i,j] <- ifelse(length(tmp)==1,tmp*(tmp-1)/2,prod(tmp))
      }
    }
  }
  ## Diagonal part of the rate matrix
  for (i in 1:nSt){
    RateM[i,i] <- -sum(RateM[i,])
  }
  return(list(RateM=RateM,StSpM=StSpM))
}

```

We can now define a function that calculates the correlation (or covariance) between pairs of summary statistics, namely H, L, E and I:

```{r}

get_cor <- function(n, with_T = F, mode = 'cor') {
  # Compute the block-counting process
  obj <- BlockCountingRateMAndStateSpace(n)
  n_states <- nrow(obj$RateM)-1
  # Define sub-intensity matrix
  subintensity_matrix <- obj$RateM[-nrow(obj$RateM),-ncol(obj$RateM)]
  # Define vector of initial probabilities
  initial_probabilities <- c(1, rep(0, n_states-1))
  # Define rewards for the different quantities
  H_reward <- rep(1, n_states)
  L_reward <- rowSums(obj$StSpM)[-(n_states+1)]
  if (n == 3) {
    E_reward <- c(3, 1)
  } else if (n == 2) {
    E_reward <- c(2)
  } else {
    E_reward <- obj$StSpM[-n_states,1]
  }
  I_reward <- L_reward-E_reward
  T_reward <- c()
  if (with_T) {
    for (j in 2:n) {
      T_reward <- c(T_reward, rowSums(obj$StSpM)[-(n_states+1)]==j)
    }
  }
  # Gather rewards in a reward matrix
  reward_matrix <- matrix(
    c(H_reward, L_reward, E_reward, I_reward, T_reward),
    nrow = n_states)
  # Create multivariate phase-type object
  PH_object <- MPH(as.matrix(subintensity_matrix), initial_probabilities, reward_matrix)
  # Convert to correlation if necessary
  covar_mat <- var(PH_object)
  if (mode == 'cor') {
    corr_mat <- cov2cor(covar_mat)
  } else {
    corr_mat <- covar_mat
  }
  corr_mat[lower.tri(corr_mat, diag = T)] <- NA
  colnames(corr_mat)<- if (with_T) c('H', 'L', 'E', 'I', paste0('T', 2:n)) else c('H', 'L', 'E', 'I')
  rownames(corr_mat)<- if (with_T) c('H', 'L', 'E', 'I', paste0('T', 2:n)) else c('H', 'L', 'E', 'I')
  reshape2::melt(corr_mat, na.rm = TRUE)
}

```

Get correlations for a sample size of 8:

```{r}

get_cor(8)

```

Get covariances for a sample size of 8:

```{r}

get_cor(8, mode = 'cov')

```

Get correlations for sample sizes betwen 2 and 20:

```{r}

wrapper <- function(i) {
  # print(i)
  mutate(get_cor(i), n = i)
}

tab1 <- lapply(2:20, wrapper) %>%
  reduce(bind_rows) %>%
  as_tibble() %>% 
  mutate(
    Var1 = factor(Var1, c('H', 'L', 'E', 'I')),
    Var2 = factor(Var2, c('H', 'L', 'E', 'I')),
    type = 'Correlation'
  )

```

Get covariances for sample sizes betwen 2 and 20:

```{r}

wrapper <- function(i) {
  # print(i)
  mutate(get_cor(i, mode = 'cov'), n = i)
}

tab2 <- lapply(2:20, wrapper) %>%
  reduce(bind_rows) %>%
  as_tibble() %>% 
  mutate(
    Var1 = factor(Var1, c('H', 'L', 'E', 'I')),
    Var2 = factor(Var2, c('H', 'L', 'E', 'I')),
    type = 'Covariance'
  )

```

```{r}

# Merge cor and cov matrices
totab <- bind_rows(tab1, tab2) %>% 
  drop_na() %>% 
  filter(n > 2 | (Var1 == 'H' & Var2 == 'L')) %>% 
  pivot_wider(names_from = type, values_from = value)

# Calculate secondary axis for ggplot
sec <- help_secondary(totab, primary = Covariance, secondary = Correlation)

totab %>% 
  ggplot() +
  geom_line(aes(n, Covariance), color = '#2c7bb6') +
  geom_point(aes(n, Covariance), color = '#2c7bb6', size = 1) +
  geom_line(aes(n, sec$proj(Correlation)), color = '#d7191c') +
  geom_point(aes(n, sec$proj(Correlation)), color = '#d7191c', size = 1) +
  facet_grid(Var2~Var1, switch="y") +
  theme_few() +
  scale_y_continuous(breaks = 0:5, sec.axis = sec) +
  theme(
    strip.text.y.left = element_text(angle = 0), 
    strip.placement = "outside",
    axis.text.y.right = element_text(color = "#d7191c"),
    axis.text.y.left = element_text(color = "#2c7bb6"),
    axis.ticks.y.left = element_line(color = "#2c7bb6"),
    axis.ticks.y.right = element_line(color = "#d7191c"),
    axis.title.y.right = element_text(color = "#d7191c", margin = margin(l=13)),
    axis.title.y.left = element_text(color = "#2c7bb6"),
    aspect.ratio = 1) +
  ylab('Covariance') +
  xlab('n') 

ggsave('cor_cov.pdf', width = 6, height = 5.5)

```
